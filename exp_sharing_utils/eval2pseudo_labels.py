'''
This file uses predictions from the provided DQN model to generate pseudo labels used for training and experience sharing.
For instance, we can use trained parameters to generate pseudo labels on a set of unlabeled data.
The resulting dataset can be used to train a model that may perform better than self supervision techniques 
on the unlabeled data. 

Author: Shuhao Lai <shuhaolai18@gmail.com>
'''

import re
import os


def gen_pseudo_label_files(output_folder, id2landmarks):
    '''
    This function formats the predictions from our DQN model to be used as pseudo labels for training. 
    This requires saving each landmark to a separate file and generating a parent file containing 
    paths of all these files.
    
    :param output_folder: Folder to save pseudo labels to be used by our DQN model. 
    :param id2landmarks: Dictionary generated by extract_preds(.)
    '''
    
    folder_name = 'pseudo_labels_files'
    folder_path = os.path.join(output_folder, folder_name)

    if not os.path.exists(folder_path):
        os.makedirs(folder_path)

    landmark_links_name = 'train_landmark_paths.txt'
    landmark_links_path = os.path.join(folder_path, landmark_links_name)
    landmarks_links_file = open(landmark_links_path, 'w')

    num_landmarks = len(id2landmarks)
    id2landmarks_items = list(id2landmarks.items())
    extract_int_id = lambda id_landmark_tuple: int(id_landmark_tuple[0][2:])
    id2landmarks_items.sort(key=extract_int_id)
    for i, (id, (x, y, z)) in enumerate(id2landmarks_items):
        landmark_file_path = os.path.join(folder_path, id + '.txt')
        if i == num_landmarks:
            landmarks_links_file.write(landmark_file_path)
        else:
            landmarks_links_file.write(landmark_file_path + '\n')

        landmark_file = open(landmark_file_path, 'w')
        landmark_file.write(f'{x},{y},{z}')
        landmark_file.close()

    landmarks_links_file.close()


def extract_preds(preds_path):
    '''
    Given the path to a file of predictions made by our DQN model, we generate a dictionary
    which maps patient ID to landmark predictions (which are x,y,z coordinates). 
    
    :param preds_path: Path to file containing predictions.
    :return: Dictionary to map patient ID to landmark predictions. 
    '''
    
    with open(preds_path) as f:
        lines = f.readlines()
        num_lines = len(lines)
        pred_pattern = 'Loc \((\d+), (\d+), (\d+)\)'
        filename_pattern = 'MD\d\d\d'
        id2preds = {}
        for line_i in range(0, num_lines, 2):
            filename = lines[line_i]
            id_match = re.search(filename_pattern, filename)
            id = id_match.group(0)

            preds = lines[line_i+1]
            pred_matches = re.search(pred_pattern, preds)
            x, y, z = int(pred_matches.group(1)), int(pred_matches.group(2)), int(pred_matches.group(3))

            id2preds[id] = (x, y, z)
        return id2preds


def format_all_pseudo_labels(folder_path):
    '''
    Generates pseudo labels from many sets of predictions, each in its own folder. Each set 
    of predictions can be organized by task i.e. one set is predictions for spleen localization, one 
    set for left knee localization, etc..
    
    :param folder_path: Parent folder containing folders of predictions
    '''
    
    preds_filename = 'terminal_landmarks.txt'
    pseudo_label_tasks_foldernames = os.listdir(folder_path)
    for pseudo_label_task_foldername in pseudo_label_tasks_foldernames:
        pseudo_label_task_folder = os.path.join(folder_path, pseudo_label_task_foldername)
        preds_file_pth = os.path.join(pseudo_label_task_folder, preds_filename)
        id2preds = extract_preds(preds_file_pth)
        gen_pseudo_label_files(pseudo_label_task_folder, id2preds)


if __name__ == '__main__':
    folder_path = '/raid/home/slai16/research_retrain/pseudo_labels'
    format_all_pseudo_labels(folder_path)